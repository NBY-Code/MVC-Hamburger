// <auto-generated />
using System;
using MVC_Hamburger.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_Hamburger.Data.Migrations
{
    [DbContext(typeof(NBYBurgerContext))]
    [Migration("20230517094513_migv10")]
    partial class migv10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_Hamburger.Models.ExtraMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.ToTable("ExtraMaterials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Barbekü",
                            Photo = "/Assest/images/barberkü.jpeg",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cheddar",
                            Photo = "/Assest/images/cheddar.jpeg",
                            Price = 1.50m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Crispy Ball",
                            Photo = "/Assest/images/citirtop.jpeg",
                            Price = 1.50m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Barbeque Sauce",
                            Photo = "/Assest/images/barberkü.jpeg",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mixed Special",
                            Photo = "/Assest/images/karisiktabak.jpeg",
                            Price = 11.00m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cheddar Filling",
                            Photo = "/Assest/images/kasardolgu.webp",
                            Price = 5.00m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ketchup",
                            Photo = "/Assest/images/ketcap.jpeg",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mayonnaise",
                            Photo = "/Assest/images/mayonez.jpeg",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ranch Sauce",
                            Photo = "/Assest/images/ranchsos.jpeg",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Garlic Mayonnaise",
                            Photo = "/Assest/images/sarimsaklimayonez.jpeg",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 11,
                            Name = "Schnitzel",
                            Photo = "/Assest/images/sinitzel.jpeg",
                            Price = 8.75m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Sweet Chilli Sauce",
                            Photo = "/Assest/images/sweetchillisos.jpeg",
                            Price = 1.00m
                        });
                });

            modelBuilder.Entity("MVC_Hamburger.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cheeseburger",
                            Photo = "/Assest/images/f2.png",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chicken burger",
                            Photo = "/Assest/images/f8.png",
                            Price = 11.99m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chicken Cheeseburger",
                            Photo = "/Assest/images/f7.png",
                            Price = 13.99m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pepperoni Pizza",
                            Photo = "/Assest/images/f3.png",
                            Price = 14.99m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Margherita Pizza",
                            Photo = "/Assest/images/f1.png",
                            Price = 12.99m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Meat Lovers Pizza",
                            Photo = "/Assest/images/f6.png",
                            Price = 16.99m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Spaghetti Carbonara",
                            Photo = "/Assest/images/f9.png",
                            Price = 10.99m
                        },
                        new
                        {
                            Id = 8,
                            Name = "Special Pasta",
                            Photo = "/Assest/images/f4.png",
                            Price = 11.99m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Garlic Fries",
                            Photo = "/Assest/images/f5.png",
                            Price = 4.99m
                        });
                });

            modelBuilder.Entity("MVC_Hamburger.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.OrdersExtraMaterial", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ExtraMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ExtraMaterialId");

                    b.HasIndex("ExtraMaterialId");

                    b.ToTable("OrdersExtraMaterials");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.OrdersMenu", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("OrdersMenus");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVC_Hamburger.Models.Order", b =>
                {
                    b.HasOne("MVC_Hamburger.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.OrdersExtraMaterial", b =>
                {
                    b.HasOne("MVC_Hamburger.Models.ExtraMaterial", "ExtraMaterial")
                        .WithMany("OrdersExtraMaterials")
                        .HasForeignKey("ExtraMaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersExtraMaterials_ExtraMaterials");

                    b.HasOne("MVC_Hamburger.Models.Order", "Order")
                        .WithMany("OrdersExtraMaterials")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersExtraMaterials_Orders");

                    b.Navigation("ExtraMaterial");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.OrdersMenu", b =>
                {
                    b.HasOne("MVC_Hamburger.Models.Menu", "Menu")
                        .WithMany("OrdersMenus")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersMenus_Menus");

                    b.HasOne("MVC_Hamburger.Models.Order", "Order")
                        .WithMany("OrdersMenus")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrdersMenus_Orders");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.ExtraMaterial", b =>
                {
                    b.Navigation("OrdersExtraMaterials");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.Menu", b =>
                {
                    b.Navigation("OrdersMenus");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.Order", b =>
                {
                    b.Navigation("OrdersExtraMaterials");

                    b.Navigation("OrdersMenus");
                });

            modelBuilder.Entity("MVC_Hamburger.Models.AppUser", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
